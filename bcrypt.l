# bcrypt library interface via native calls
# (C) 2021 Davide Bertolotto
(symbols 'bcrypt 'pico)

# Library location
(local) *Lib
(setq *Lib "./bcrypt.so")

# Native wrapper
(local) crypto
(de crypto @
  (pass 'native *Lib))

# Low level call
# Text: the text to hash
# Settings: configuration string made of prefix + count + salt
# Settings can be the salt generated by gensalt or even the full hash generated by crypt itself
# Returns: full hash (prefix + count + salt + hash)
(local) crypt
(de crypt (Text Settings)
  (crypto "crypt" 'S Text Settings))

# Low level call
# Prefix: method, usually $2b$ (see man page)
# Count: iterations exponent 2**Count (4 < Count < 31)
# Input: random string from which the salt is generated
# Returns: salt (prefix + count + salt)
(local) gensalt
(de gensalt (Prefix Count Input)
  (crypto "crypt_gensalt" 'S Prefix Count Input (bytes Input)))

# Generate salt input from a generic source
# Source: the source (e.g. "/dev/urandom")
# Salt input needs 16 bytes, reading 16 chars takes surely more than enough
(local) generate-salt-input
(de generate-salt-input (Source)
  (in Source
    (pack (make (do 16 (link (char)))))))

# Generate a blowfish salt
# Count: iterations exponent 2**Count (4 < Count < 31)
# Takes random string from "/dev/urandom"
(local) generate-salt
(de generate-salt (Count)
  (let (C (max 4 (min 31 Count))
        Inp (generate-salt-input "/dev/urandom"))
    (gensalt "$2b$" C Inp)))

# Generate hash
# Count: iterations exponent 2**Count (4 < Count < 31)
# Text: Text to hash
(local) generate-hash
(de generate-hash (Count Text)
  (crypt Text (generate-salt Count)))

# Compare Text hash with Reference hash
# Text: Text to hash
# Hash: reference full hash
(local) compare-with-hash
(de compare-with-hash (Text Hash)
  (= Hash (crypt Text Hash)))

# example
(let (Password "Example"
      WrongPwd "example"
      Hash (generate-hash 5 Password))
  (prinl "hash: " Hash)
  (prin "compare T: ")
  (println (compare-with-hash Password Hash))
  (prin "compare NIL: ")
  (println (compare-with-hash WrongPwd Hash)))

